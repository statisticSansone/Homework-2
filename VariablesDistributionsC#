using System;
using System.Collections.Generic;
using System.Windows.Forms;

namespace DistributionsOfVariables
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            string[] variableReligion = new string[] {
                "NotReligious", "NotReligious", "NotReligious", "NotReligious", "Hindu", "NotReligious",
                "Christian", "NotReligious", "Christian", "NotReligious", "NotReligious", "NotReligious",
                "Christian", "NotReligious", "Christian", "Christian", "Orthodox", "NotReligious",
                "NotReligious", "NotReligious", "Buddhism", "NotReligious", "NotReligious", "NotReligious",
                "NotReligious", "Christian", "NotReligious", "NotReligious", "NotReligious", "NotReligious",
                "NotReligious", "NotReligious", "NotReligious", "NotReligious", "NotReligious", "NotReligious",
                "Christian", "Christian", "NotReligious", "NotReligious", "Christian", "NotReligious",
                "Orthodox", "NotReligious", "NotReligious", "NotReligious", "NotReligious", "Christian",
                "NotReligious", "NotReligious", "NotReligious", "NotReligious", "NotReligious", "NotReligious",
                "NotReligious", "NotReligious", "NotReligious"
            };
            string[] variableEntrepreneur = new string[] {
                "2", "3", "3", "3", "3", "4", "3", "3", "3", "4", "2", "3", "1", "3", "4", "3", "2", "3", "4", "4",
                "3", "2", "4", "2", "2", "3", "3", "3", "3", "3", "3", "3", "4", "3", "4", "5", "4", "5", "2", "2",
                "5", "0", "3", "4", "3", "4", "5", "3", "5", "2", "4", "2", "4", "3", "4", "4", "3"
            };
            string[] variableAge = new string[] {
                "22", "22", "22", "23", "23", "21", "23", "23", "24", "24", "23", "21", "25", "22", "22", "22",
                "25", "21", "21", "21", "23", "22", "21", "23", "24", "25", "23", "22", "22", "27", "23", "24", "22",
                "25", "39", "26", "23", "22", "22", "22", "23", "27", "23", "25", "22", "22", "22", "22", "21", "23",
                "23", "26", "27", "23", "23", "22", "23", "27", "24", "22"
            };

            var variableReligionDistributions = ComputeDistributions(variableReligion);
            var variableEntrepreneurDistributions = ComputeDistributions(variableEntrepreneur);
            var variableAgeDistributions = ComputeDistributions(variableAge);

            PrintDistributions("Religion distribution:", variableReligionDistributions);
            PrintDistributions("Entrepreneur distribution:", variableEntrepreneurDistributions);
            PrintDistributions("Age distribution:", variableAgeDistributions);

            var jointDistribution = ComputeJointDistribution(variableReligion, variableEntrepreneur);
            PrintDistributions("Joint Religion-Entrepreneur Distribution:", jointDistribution);
        }

        private Dictionary<string, Dictionary<string, string>> ComputeDistributions(string[] variable)
        {
            var distribution = new Dictionary<string, int>();

            foreach (var value in variable)
            {
                if (distribution.ContainsKey(value))
                    distribution[value]++;
                else
                    distribution[value] = 1;
            }

            var total = variable.Length;

            var result = new Dictionary<string, Dictionary<string, string>>();
            foreach (var kvp in distribution)
            {
                var key = kvp.Key;
                var value = kvp.Value;
                var relativeDistribution = ((double)value / total).ToString("F2"); 
                var absoluteDistribution = value.ToString();
                var percentageDistribution = ((double)value / total * 100).ToString("F2") + "%"; 

                result[key] = new Dictionary<string, string>
                {
                    { "Absolute", absoluteDistribution },
                    { "Relative", relativeDistribution },
                    { "Percentage", percentageDistribution }
                };
            }

            return result;
        }

        private Dictionary<string, Dictionary<string, string>> ComputeJointDistribution(string[] variable1, string[] variable2)
        {
            var jointDistribution = new Dictionary<string, int>();
            var total = variable1.Length;

            for (int i = 0; i < total; i++)
            {
                var key = $"{variable1[i]} - {variable2[i]}";
                if (jointDistribution.ContainsKey(key))
                    jointDistribution[key]++;
                else
                    jointDistribution[key] = 1;
            }

            var result = new Dictionary<string, Dictionary<string, string>>();
            foreach (var kvp in jointDistribution)
            {
                var key = kvp.Key;
                var value = kvp.Value;
                var relativeDistribution = ((double)value / total).ToString("F2");
                var absoluteDistribution = value.ToString();
                var percentageDistribution = ((double)value / total * 100).ToString("F2") + "%";

                result[key] = new Dictionary<string, string>
                {
                    { "Absolute", absoluteDistribution },
                    { "Relative", relativeDistribution },
                    { "Percentage", percentageDistribution }
                };
            }

            return result;
        }

        private void PrintDistributions(string title, Dictionary<string, Dictionary<string, string>> results)
        {
            var titleElement = new Label
            {
                Text = title,
                AutoSize = true
            };
            resultPanel.Controls.Add(titleElement);

            foreach (var kvp in results)
            {
                var key = kvp.Key;
                var distributions = kvp.Value;

                var distributionElement = new Label
                {
                    Text = $"For value {key}: absolute distribution is {distributions["Absolute"]}, relative distribution is {distributions["Relative"]}, percentage distribution is {distributions["Percentage"]}",
                    AutoSize = true
                };
                resultPanel.Controls.Add(distributionElement);
            }
        }
    }
}
